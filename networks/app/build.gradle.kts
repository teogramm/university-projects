/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.7/userguide/building_java_projects.html
 */

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    application
    java
    jacoco
    id("org.openjfx.javafxplugin") version "0.0.9"
    id("com.github.johnrengelman.shadow") version "6.1.0"
}

java{
    targetCompatibility = JavaVersion.VERSION_14
}

javafx {
    modules("javafx.controls","javafx.base")
}

repositories {
    // Use JCenter for resolving dependencies.
    jcenter()
    mavenCentral()
}

dependencies {
    implementation("com.google.code.gson:gson:2.8.6")
    implementation("org.jetbrains:annotations:20.1.0")

    // Use JUnit Jupiter API for testing.
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.7.0")
    testImplementation("org.mockito:mockito-core:+")
    testImplementation("org.mockito:mockito-inline:+")

    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")

    // This dependency is used by the application.
    implementation("com.google.guava:guava:29.0-jre")
}

//application {
//    // Define the main class for the application.
//    mainClass.set("org.teogramm.mail.App")
//}


// Disable JAR generation
tasks.shadowJar{
    this.enabled = false
}

tasks.register("runServer",JavaExec::class){
    classpath = sourceSets.main.get().runtimeClasspath
    main = "org.teogramm.mail.server.Server"
}

tasks.register("runClient",JavaExec::class){
    classpath = sourceSets.main.get().runtimeClasspath
    main = "org.teogramm.mail.client.ui.MailUI"
}

tasks{
    register("clientJar",ShadowJar::class){
        from(project.sourceSets.main.get().output)
        configurations = mutableListOf(project.configurations.runtimeClasspath.get())
        archiveClassifier.set("client")
        project.setProperty("mainClassName","org.teogramm.mail.client.Client")
        manifest {
            attributes["Main-Class"] = "org.teogramm.mail.client.Client"
        }
    }

    register("serverJar",ShadowJar::class){
        from(project.sourceSets.main.get().output)
        configurations = mutableListOf(project.configurations.runtimeClasspath.get())
        archiveClassifier.set("server")
        project.setProperty("mainClassName","org.teogramm.mail.server.Server")
        manifest {
            attributes["Main-Class"] = "org.teogramm.mail.server.Server"
        }
    }
}

tasks.test {
    // Use junit platform for unit tests.
    useJUnitPlatform()
    finalizedBy(tasks.jacocoTestReport)
}



tasks.jacocoTestReport {
    dependsOn(tasks.test) // tests are required to run before generating the report
    reports {
        xml.isEnabled = true
    }

        classDirectories.setFrom(classDirectories.files.map {
            fileTree(it).apply {
                exclude("**/ui/**")
            }
        })
}
